import java.util.Scanner;
import java.util.Arrays;
import java.io.*;
import javax.swing.JOptionPane;

public class Data {
	public static int moves = 0;
	public static int deaths = 0;
	public static short score = 0;
	public static short maxScore = 200;
	public static int year = -21374;
	public static int kimisNumber = 19670064;
	public static int hint = 1;
	
	public static boolean gameOver;
	public static boolean yesOrNo;
	public static boolean confirmingNewGame;
	public static boolean confirmingRestoreGame;
	public static boolean confirmingQuitGame;
	
	private static String[] saveData = new String[2222];
	
	public static void setUpGame() {
		Thesaurus.addExtraWords();
		Meditate.setShrines();
		Room.setRooms();
		Room.setExits();
		Room.setRoomsWithPanels();
		newGame();
	}
	
	public static void yesOrNo(String s) {
		switch (s) {
			case "YES":
				if (confirmingNewGame) {
					newGame();
					confirmingNewGame = false;
				} else if (confirmingRestoreGame) {
					attemptToRestoreGame();
					confirmingRestoreGame = false;
				} else if (confirmingQuitGame) {
					System.exit(0);
				} else {
					System.out.println("Data.yesOrNo() error");
				}
				
				yesOrNo = false;
				break;
			case "NO":
				if (confirmingNewGame) {
					Story.print("Restart canceled.");
					confirmingNewGame = false;
				} else if (confirmingRestoreGame) {
					Story.print("Restore canceled.");
					confirmingRestoreGame = false;
				} else if (confirmingQuitGame) {
					Story.print("Phew!");
				} else {
					System.out.println("Data.yesOrNo() error");
				}
				
				yesOrNo = false;
				break;
			default:
				Story.print("Please type yes or no.");
				break;
		}
	}
	
	public static void confirmNewGame() {		
		Story.print("You are about to start a new game. Any unsaved progress will be lost. Continue?");
		
		yesOrNo = true;
		confirmingNewGame = true;
	}

	public static void newGame() {
		Wabewalker.deleteHeader();
		Story.wipeStory();
		resetGameData();
		Room.setGardenObjects();
		Room.setHouseObjects();
		Room.setTempleObjects();
		Story.print(Story.intro1);
		Story.newParagraph();
		Story.pressKey("start");
	}
	
	public static void startGame() {
		Story.wipeStory();
		Wabewalker.setHeader(); 
		Story.print(Story.intro2);
		Story.newParagraph();
		Room.location.add(Room.gardenPatio);
		Room.visited.add(Room.gardenPatio);
		Wabewalker.locationHolder.setText(Player.getLocation().title);
		Story.printLocation();
		Story.newLine();
		Story.printDesc();
		updateScore(0);
	}
	
	private static boolean fileValid(String f) {
		if (f == null || f.equals("")) {
			return false;
		} else {
			return true;
		}
	}
	
	public static void attemptToSaveGame() {
		String fileName;
		fileName = JOptionPane.showInputDialog("Enter a name for the save file");
		
		if (fileValid(fileName)) {
			File file = new File(fileName + ".txt");
			
			if(file.exists()) { 
				confirmOverwrite(fileName);
			} else {
				saveGame(fileName);
			}	
		} else {
			Story.print("Save canceled.");
		}
	}
	
	
	public static void confirmOverwrite(String fileName) {
		int input = JOptionPane.showConfirmDialog(null, "Overwrite existing save data?", "Confirmation Request", 0);
		
		if (input == 0) {
			saveGame(fileName);
		} else {
			Story.print("Save canceled.");
		}
	}
	
	public static void saveGame(String fileName) {
		try {
			File file = new File(fileName + ".txt");	
			file.delete();
			PrintWriter output = new PrintWriter(file);

			output.println("This is the save data for Wabewalker.");
			output.println("Do not edit this file, because it will corrupt the save.");
			output.println(Player.getLocation().title);
			output.println(Story.brief);
			output.println(Player.meditating);
			output.println(Player.dreaming);
			output.println(Player.sawReaper1);
			output.println(Player.sawReaper2);
			output.println(Player.facingReaper);
			output.println(Player.orangeAlive);
			output.println(Player.greenAlive);
			output.println(Player.purpleAlive);
			output.println(Player.orangeAtTV);
			output.println(Player.greenAtTV);
			output.println(Player.purpleAtTV);
			output.println(Player.caughtFish);
			output.println(Player.hadCorn);
			output.println(Player.raDropped);
			output.println(Player.onPhone);
			output.println(Player.fishing);
			output.println(Player.sipped);
			output.println(Player.spokeToClan);
			output.println(Player.metIsachi);
			output.println(Player.playedTheaterTV);
			output.println(Player.baitedRod);
			output.println(Player.openedHokura);
			output.println(Player.examinedCard);
			output.println(Player.gotKimiPoints);
			output.println(Player.openedSandExhibitDoor);
			output.println(Player.gotTodPoints);
			output.println(Player.readBook);
			output.println(Player.readCryptogram);
			output.println(Player.pulledHallwayLever);
			output.println(Player.openedCloset);
			output.println(Player.openedShrineRoom2Door);
			output.println(Player.tookParchment);
			output.println(Player.examinedMannequin);
			output.println(Player.startedFishing);
			output.println(Player.previousLocation);
			output.println(Meditate.visualizingLotus);
			output.println(Meditate.visualizingFish);
			output.println(Meditate.visualizingKnot);
			output.println(Meditate.trancedGarden);
			output.println(Meditate.trancedHouse);
			output.println(Meditate.trancedTemple);
			output.println(Meditate.trancesTranced);
			output.println(Meditate.gardenTrance);
			output.println(Meditate.houseTrance);
			output.println(Meditate.templeTrance);
			output.println(NPC.scheduled);
			output.println(NPC.reaperMoved);
			output.println(NPC.kimiState);
			output.println(NPC.todState);
			output.println(moves);
			output.println(score);
			output.println(year);
			output.println(World.tripwire);
			output.println(World.dark);
			output.println(World.raDropped);
			output.println(World.islandOpen);
			output.println(World.omInSafe);
			output.println(World.jiInSafe);
			output.println(World.niInSafe);
			output.println(World.yuInCase);
			output.println(World.goInBox);
			output.println(World.sandExhibitDoorOpen);
			output.println(World.loungeSafeOpen);
			output.println(World.shrineRoom1SafeOpen);
			output.println(World.shrineRoom2DoorOpen);
			output.println(World.courtyardDoorOpen);
			output.println(World.studySafeOpen);
			output.println(World.creakyDeckOpen);
			output.println(World.caseOpen);
			output.println(World.cornOnRod);
			output.println(World.bite);
			output.println(World.theaterTVAtBeginning);
			output.println(World.reaperDisabled);
			output.println(Player.memory.contains("fish"));
			output.println(Player.memory.contains("lotus"));
			output.println(Player.memory.contains("knot"));
			output.println(Player.memory.contains("om"));
			output.println(Player.memory.contains("ni"));
			output.println(Player.memory.contains("go"));
			output.println(Player.memory.contains("yu"));
			output.println(Player.memory.contains("ji"));
			output.println(Player.memory.contains("ra"));
			output.println(Player.memory.contains("shi"));
			output.println(Player.inventory.contains(Item.om.getTitle()));
			output.println(Player.inventory.contains(Item.ni.getTitle()));
			output.println(Player.inventory.contains(Item.go.getTitle()));
			output.println(Player.inventory.contains(Item.yu.getTitle()));
			output.println(Player.inventory.contains(Item.ji.getTitle()));
			output.println(Player.inventory.contains(Item.ra.getTitle()));
			output.println(Player.inventory.contains(Item.shi.getTitle()));
			output.println(Player.inventory.contains(Item.book.getTitle()));
			output.println(Player.inventory.contains(Item.cryptogram.getTitle()));
			output.println(Player.inventory.contains(Item.rod.getTitle()));
			output.println(Player.inventory.contains(Item.corn.getTitle()));
			output.println(Player.inventory.contains(Item.parchment.getTitle()));
			output.println(Player.inventory.contains(Item.card.getTitle()));
			output.println(Player.inventory.contains(Item.phone.getTitle()));
			output.println(Player.inventory.contains(Item.jewelledCase.getTitle()));
			output.println(Player.inventory.contains(Item.sword.getTitle()));
			output.println(Player.orangeSavedInventory.contains(Item.om.getTitle()));
			output.println(Player.orangeSavedInventory.contains(Item.ji.getTitle()));
			output.println(Player.orangeSavedInventory.contains(Item.book.getTitle()));
			output.println(Player.orangeSavedInventory.contains(Item.sword.getTitle()));
			output.println(Player.greenSavedInventory.contains(Item.ra.getTitle()));
			output.println(Player.greenSavedInventory.contains(Item.ni.getTitle()));
			output.println(Player.greenSavedInventory.contains(Item.rod.getTitle()));
			output.println(Player.greenSavedInventory.contains(Item.corn.getTitle()));
			output.println(Player.greenSavedInventory.contains(Item.cryptogram.getTitle()));
			output.println(Player.greenSavedInventory.contains(Item.phone.getTitle()));
			output.println(Player.greenSavedInventory.contains(Item.parchment.getTitle()));
			output.println(Player.purpleSavedInventory.contains(Item.go.getTitle()));
			output.println(Player.purpleSavedInventory.contains(Item.yu.getTitle()));
			output.println(Player.purpleSavedInventory.contains(Item.shi.getTitle()));
			output.println(Player.purpleSavedInventory.contains(Item.card.getTitle()));
			output.println(Player.purpleSavedInventory.contains(Item.jewelledCase.getTitle()));
			output.println(Item.getLocation(Item.om.getTitle()));
			output.println(Item.getLocation(Item.ni.getTitle()));
			output.println(Item.getLocation(Item.go.getTitle()));
			output.println(Item.getLocation(Item.yu.getTitle()));
			output.println(Item.getLocation(Item.ji.getTitle()));
			output.println(Item.getLocation(Item.ra.getTitle()));
			output.println(Item.getLocation(Item.shi.getTitle()));
			output.println(Item.getLocation(Item.book.getTitle()));
			output.println(Item.getLocation(Item.cryptogram.getTitle()));
			output.println(Item.getLocation(Item.rod.getTitle()));
			output.println(Item.getLocation(Item.corn.getTitle()));
			output.println(Item.getLocation(Item.parchment.getTitle()));
			output.println(Item.getLocation(Item.card.getTitle()));
			output.println(Item.getLocation(Item.phone.getTitle()));
			output.println(Item.getLocation(Item.jewelledCase.getTitle()));
			output.println(Item.getLocation(Item.sword.getTitle()));
			output.println(deaths);
			for(int i=0;i<Player.guesses.size();i++){output.println(Player.guesses.get(i));}
		
			output.close();
			Story.print("Save successful.");
		} catch (Exception ex) {
			Story.print("Save unsuccessful.");
		}
		
	}
	
	public static void confirmRestore() {
		Story.print("You are about to restore the game to a previous state. Any unsaved progress will be lost. Continue?");
		
		yesOrNo = true;
		confirmingRestoreGame = true;
	}
	
	public static void attemptToRestoreGame() {
		String fileName;
		fileName = JOptionPane.showInputDialog("Enter the name of the save file you would like to restore.");
		
		if (fileValid(fileName)) {
			File file = new File(fileName + ".txt");
			
			if(file.exists()) { 
				Story.restartRestoreOrQuit = false;
				loadGame(fileName);
			} else {
				Story.print("Restore unsuccessful. File not found.\n(Be sure that the save file is in the same folder as the Wabewalker Executable Jar File)");
			}	
		} else {
			Story.print("Restore canceled.");
		}
	}
	
	private static int getFileSize(String fileName) {
		try {
			int lines = 0;

			BufferedReader reader = new BufferedReader(new FileReader(fileName + ".txt"));

			while (reader.readLine() != null)
				lines++;

			reader.close();
			
			return lines;
		} catch (Exception e){
			return 0;
		}
	}
	
	public static void loadGame(String fileName) {
		boolean restoreSuccessful = false;
		int fileSize = getFileSize(fileName);
		
		try {
			File file = new File(fileName + ".txt");
			Scanner input = new Scanner(file);
		
			for (int i = 0; i < fileSize; i++) {
				saveData[i] = input.nextLine();
			}
			
			input.close();
			Story.print("Restore successful.");
			restoreSuccessful = true;
		} catch (Exception ex) {
			Story.print("Restore unsuccessful.");
		}
		
		if (restoreSuccessful) {
			Story.newParagraph();
			resetGameData();
			Player.restoreSavedLocation(Room.getRoomFromTitle(saveData[2]));
			if(saveData[3].equals("true")){Story.brief=true;}else{Story.brief=false;}
			if(saveData[4].equals("true")){Player.meditating=true;}else{Player.meditating=false;}
			if(saveData[5].equals("true")){Player.dreaming=true;}else{Player.dreaming=false;}
			if(saveData[6].equals("true")){Player.sawReaper1=true;}else{Player.sawReaper1=false;}
			if(saveData[7].equals("true")){Player.sawReaper2=true;}else{Player.sawReaper2=false;}
			if(saveData[8].equals("true")){Player.facingReaper=true;}else{Player.facingReaper=false;}
			if(saveData[9].equals("true")){Player.orangeAlive=true;}else{Player.orangeAlive=false;}
			if(saveData[10].equals("true")){Player.greenAlive=true;}else{Player.greenAlive=false;}
			if(saveData[11].equals("true")){Player.purpleAlive=true;}else{Player.purpleAlive=false;}
			if(saveData[12].equals("true")){Player.orangeAtTV=true;}else{Player.orangeAtTV=false;}
			if(saveData[13].equals("true")){Player.greenAtTV=true;}else{Player.greenAtTV=false;}
			if(saveData[14].equals("true")){Player.purpleAtTV=true;}else{Player.purpleAtTV=false;}
			if(saveData[15].equals("true")){Player.caughtFish=true;}else{Player.caughtFish=false;}
			if(saveData[16].equals("true")){Player.hadCorn=true;}else{Player.hadCorn=false;}
			if(saveData[17].equals("true")){Player.raDropped=true;}else{Player.raDropped=false;}
			if(saveData[18].equals("true")){Player.onPhone=true;}else{Player.onPhone=false;}
			if(saveData[19].equals("true")){Player.fishing=true;}else{Player.fishing=false;}
			if(saveData[20].equals("true")){Player.sipped=true;}else{Player.sipped=false;}
			if(saveData[21].equals("true")){Player.spokeToClan=true;}else{Player.spokeToClan=false;}
			if(saveData[22].equals("true")){Player.metIsachi=true;}else{Player.metIsachi=false;}
			if(saveData[23].equals("true")){Player.playedTheaterTV=true;}else{Player.playedTheaterTV=false;}
			if(saveData[24].equals("true")){Player.baitedRod=true;}else{Player.baitedRod=false;}
			if(saveData[25].equals("true")){Player.openedHokura=true;}else{Player.openedHokura=false;}
			if(saveData[26].equals("true")){Player.examinedCard=true;}else{Player.examinedCard=false;}
			if(saveData[27].equals("true")){Player.gotKimiPoints=true;}else{Player.gotKimiPoints=false;}
			if(saveData[28].equals("true")){Player.openedSandExhibitDoor=true;}else{Player.openedSandExhibitDoor=false;}
			if(saveData[29].equals("true")){Player.gotTodPoints=true;}else{Player.gotTodPoints=false;}
			if(saveData[30].equals("true")){Player.readBook=true;}else{Player.readBook=false;}
			if(saveData[31].equals("true")){Player.readCryptogram=true;}else{Player.readCryptogram=false;}
			if(saveData[32].equals("true")){Player.pulledHallwayLever=true;}else{Player.pulledHallwayLever=false;}
			if(saveData[33].equals("true")){Player.openedCloset=true;}else{Player.openedCloset=false;}
			if(saveData[34].equals("true")){Player.openedShrineRoom2Door=true;}else{Player.openedShrineRoom2Door=false;}
			if(saveData[35].equals("true")){Player.tookParchment=true;}else{Player.tookParchment=false;}
			if(saveData[36].equals("true")){Player.examinedMannequin=true;}else{Player.examinedMannequin=false;}
			Player.startedFishing = Integer.parseInt(saveData[37]);
			Player.previousLocation = saveData[38];
			if(saveData[39].equals("true")){Meditate.visualizingLotus=true;}else{Meditate.visualizingLotus=false;}
			if(saveData[40].equals("true")){Meditate.visualizingFish=true;}else{Meditate.visualizingFish=false;}
			if(saveData[41].equals("true")){Meditate.visualizingKnot=true;}else{Meditate.visualizingKnot=false;}
			if(saveData[42].equals("true")){Meditate.trancedGarden=true;}else{Meditate.trancedGarden=false;}
			if(saveData[43].equals("true")){Meditate.trancedHouse=true;}else{Meditate.trancedHouse=false;}
			if(saveData[44].equals("true")){Meditate.trancedTemple=true;}else{Meditate.trancedTemple=false;}
			Meditate.trancesTranced = Integer.parseInt(saveData[45]);
			Meditate.gardenTrance = Integer.parseInt(saveData[46]);
			Meditate.houseTrance = Integer.parseInt(saveData[47]);
			Meditate.templeTrance = Integer.parseInt(saveData[48]);
			if(saveData[49].equals("true")){NPC.scheduled=true;}else{NPC.scheduled=false;}
			if(saveData[50].equals("true")){NPC.reaperMoved=true;}else{NPC.reaperMoved=false;}
			NPC.kimiState = saveData[51];
			NPC.todState = saveData[52];
			moves = Integer.parseInt(saveData[53]);
			score = Short.parseShort(saveData[54]);
			year = Integer.parseInt(saveData[55]);
			if(saveData[56].equals("true")){World.tripwire=true;}else{World.tripwire=false;}
			if(saveData[57].equals("true")){World.dark=true;}else{World.dark=false;}
			if(saveData[58].equals("true")){World.raDropped=true;}else{World.raDropped=false;}
			if(saveData[59].equals("true")){World.islandOpen=true;}else{World.islandOpen=false;}
			if(saveData[60].equals("true")){World.omInSafe=true;}else{World.omInSafe=false;}
			if(saveData[61].equals("true")){World.jiInSafe=true;}else{World.jiInSafe=false;}
			if(saveData[62].equals("true")){World.niInSafe=true;}else{World.niInSafe=false;}
			if(saveData[63].equals("true")){World.yuInCase=true;}else{World.yuInCase=false;}
			if(saveData[64].equals("true")){World.goInBox=true;}else{World.goInBox=false;}
			if(saveData[65].equals("true")){World.sandExhibitDoorOpen=true;}else{World.sandExhibitDoorOpen=false;}
			if(saveData[66].equals("true")){World.loungeSafeOpen=true;}else{World.loungeSafeOpen=false;}
			if(saveData[67].equals("true")){World.shrineRoom1SafeOpen=true;}else{World.shrineRoom1SafeOpen=false;}
			if(saveData[68].equals("true")){World.shrineRoom2DoorOpen=true;}else{World.shrineRoom2DoorOpen=false;}
			if(saveData[69].equals("true")){World.courtyardDoorOpen=true;}else{World.courtyardDoorOpen=false;}
			if(saveData[70].equals("true")){World.studySafeOpen=true;}else{World.studySafeOpen=false;}
			if(saveData[71].equals("true")){World.creakyDeckOpen=true;}else{World.creakyDeckOpen=false;}
			if(saveData[72].equals("true")){World.caseOpen=true;}else{World.caseOpen=false;}
			if(saveData[73].equals("true")){World.cornOnRod=true;}else{World.cornOnRod=false;}
			if(saveData[74].equals("true")){World.bite=true;}else{World.bite=false;}
			if(saveData[75].equals("true")){World.theaterTVAtBeginning=true;}else{World.theaterTVAtBeginning=false;}
			if(saveData[76].equals("true")){World.reaperDisabled=true;}else{World.reaperDisabled=false;}
			if(saveData[77].equals("true"))Player.memory.add("fish");
			if(saveData[78].equals("true"))Player.memory.add("lotus");
			if(saveData[79].equals("true"))Player.memory.add("knot");
			if(saveData[80].equals("true"))Player.memory.add("om");
			if(saveData[81].equals("true"))Player.memory.add("ni");
			if(saveData[82].equals("true"))Player.memory.add("go");
			if(saveData[83].equals("true"))Player.memory.add("yu");
			if(saveData[84].equals("true"))Player.memory.add("ji");
			if(saveData[85].equals("true"))Player.memory.add("ra");
			if(saveData[86].equals("true"))Player.memory.add("shi");
			if(saveData[87].equals("true"))Player.inventory.add(Item.om.getTitle());
			if(saveData[88].equals("true"))Player.inventory.add(Item.ni.getTitle());
			if(saveData[89].equals("true"))Player.inventory.add(Item.go.getTitle());
			if(saveData[90].equals("true"))Player.inventory.add(Item.yu.getTitle());
			if(saveData[91].equals("true"))Player.inventory.add(Item.ji.getTitle());
			if(saveData[92].equals("true"))Player.inventory.add(Item.ra.getTitle());
			if(saveData[93].equals("true"))Player.inventory.add(Item.shi.getTitle());
			if(saveData[94].equals("true"))Player.inventory.add(Item.book.getTitle());
			if(saveData[95].equals("true"))Player.inventory.add(Item.cryptogram.getTitle());
			if(saveData[96].equals("true"))Player.inventory.add(Item.rod.getTitle());
			if(saveData[97].equals("true"))Player.inventory.add(Item.corn.getTitle());
			if(saveData[98].equals("true"))Player.inventory.add(Item.parchment.getTitle());
			if(saveData[99].equals("true"))Player.inventory.add(Item.card.getTitle());
			if(saveData[100].equals("true"))Player.inventory.add(Item.phone.getTitle());
			if(saveData[101].equals("true"))Player.inventory.add(Item.jewelledCase.getTitle());
			if(saveData[102].equals("true"))Player.inventory.add(Item.sword.getTitle());
			if(saveData[103].equals("true"))Player.orangeSavedInventory.add(Item.om.getTitle());
			if(saveData[104].equals("true"))Player.orangeSavedInventory.add(Item.ji.getTitle());
			if(saveData[105].equals("true"))Player.orangeSavedInventory.add(Item.book.getTitle());
			if(saveData[106].equals("true"))Player.orangeSavedInventory.add(Item.sword.getTitle());
			if(saveData[107].equals("true"))Player.greenSavedInventory.add(Item.ra.getTitle());
			if(saveData[108].equals("true"))Player.greenSavedInventory.add(Item.ni.getTitle());
			if(saveData[109].equals("true"))Player.greenSavedInventory.add(Item.rod.getTitle());
			if(saveData[110].equals("true"))Player.greenSavedInventory.add(Item.corn.getTitle());
			if(saveData[111].equals("true"))Player.greenSavedInventory.add(Item.cryptogram.getTitle());
			if(saveData[112].equals("true"))Player.greenSavedInventory.add(Item.phone.getTitle());
			if(saveData[113].equals("true"))Player.greenSavedInventory.add(Item.parchment.getTitle());
			if(saveData[114].equals("true"))Player.purpleSavedInventory.add(Item.go.getTitle());
			if(saveData[115].equals("true"))Player.purpleSavedInventory.add(Item.yu.getTitle());
			if(saveData[116].equals("true"))Player.purpleSavedInventory.add(Item.shi.getTitle());
			if(saveData[117].equals("true"))Player.purpleSavedInventory.add(Item.card.getTitle());
			if(saveData[118].equals("true"))Player.purpleSavedInventory.add(Item.jewelledCase.getTitle());
			Room.placeItem(Item.om.getTitle(), saveData[119]);
			Room.placeItem(Item.ni.getTitle(), saveData[120]);
			Room.placeItem(Item.go.getTitle(), saveData[121]);
			Room.placeItem(Item.yu.getTitle(), saveData[122]);
			Room.placeItem(Item.ji.getTitle(), saveData[123]);
			Room.placeItem(Item.ra.getTitle(), saveData[124]);
			Room.placeItem(Item.shi.getTitle(), saveData[125]);
			Room.placeItem(Item.book.getTitle(), saveData[126]);
			Room.placeItem(Item.cryptogram.getTitle(), saveData[127]);
			Room.placeItem(Item.rod.getTitle(), saveData[128]);
			Room.placeItem(Item.corn.getTitle(), saveData[129]);
			Room.placeItem(Item.parchment.getTitle(), saveData[130]);
			Room.placeItem(Item.card.getTitle(), saveData[131]);
			Room.placeItem(Item.phone.getTitle(), saveData[132]);
			Room.placeItem(Item.jewelledCase.getTitle(), saveData[133]);
			Room.placeItem(Item.sword.getTitle(), saveData[134]);
			deaths = Integer.parseInt(saveData[135]);
			for(int i=0;i<Player.guesses.size();i++){Player.guesses.add(saveData[136]+i);}
			
			World.resetBulbs();
			Story.newLine();
			Story.printDesc();
			Story.printDesc2();
			Story.printObjects();
		}
	}
	
	public static void confirmQuit() {
		int input = JOptionPane.showConfirmDialog(null, "You are about to exit the game.\nAny unsaved progress will be lost.\nContinue?", "Confirmation Request", 0);
		
		if (input == 0) {
			System.exit(0);
		} else {
		
		}
	}
	
	public static void setYear() {
		year = getRandom(1999);
		
		// resets year to desired range or if player previously guessed it
		while (year < 101 || Player.guesses.contains(year)) {
			year = getRandom(1999);
		}
	}
	
	public static int getRandom(int r) {
		int random = (int)(Math.random() * r + 1);
		
		return random;
	}
	
	public static void checkGuesses() {
		if (Player.guesses.size() > 1500) {
			Player.guesses.clear();
		}
	}
	
	public static void updateScore(int p) {
		score += p;
		
		Wabewalker.scoreHolder.setText("Score: " + score + " ");
		
		if (score > 0 && score < maxScore) {
			Story.newParagraph();
			Story.print("[Your score just increased by " + p + " points! Your total is now " + score + " out of " + maxScore + ".]");
		}
	}
	
	public static void handleGameOver(String v) {
		switch (v) {
			case "YES":
				Data.newGame();
				break;
			case "NO":
				System.exit(0);
				break;
			default:
				Story.printYesOrNo();
				break;
		}
	}
	
	private static void resetGameData() {
		moves = 0;
		score = 0;
		year = -21374;
		Story.brief = false;;
		Room.location.clear();
		Room.visited.clear();
		Player.meditating = false;
		Player.dreaming = false;
		Player.sawReaper1 = false;
		Player.sawReaper2 = false;
		Player.facingReaper = false;
		Player.orangeAlive = true;
		Player.greenAlive = true;
		Player.purpleAlive = true;
		Player.orangeAtTV = false;
		Player.greenAtTV = false;
		Player.purpleAtTV = false;
		Player.caughtFish = false;
		Player.hadCorn = false;
		Player.raDropped = false;
		Player.onPhone = false;
		Player.fishing = false;
		Player.sipped = false;
		Player.spokeToClan = false;
		Player.metIsachi = false;
		Player.playedTheaterTV = false;
		Player.baitedRod = false;
		Player.openedHokura = false;
		Player.examinedCard = false;
		Player.gotKimiPoints = false;
		Player.openedSandExhibitDoor = false;
		Player.gotTodPoints = false;
		Player.readBook = false;
		Player.readCryptogram = false;
		Player.pulledHallwayLever = false;
		Player.openedCloset = false;
		Player.openedShrineRoom2Door = false;
		Player.tookParchment = false;
		Player.examinedMannequin = false;
		Player.startedFishing = 0;
		Player.previousLocation = "";
		Player.memory.clear();
		Player.guesses.clear();
		Player.inventory.clear();
		Player.orangeSavedInventory.clear();
		Player.greenSavedInventory.clear();
		Player.purpleSavedInventory.clear();
		Meditate.visualizingLotus = false;
		Meditate.visualizingFish = false;
		Meditate.visualizingKnot = false;
		Meditate.trancedGarden = false;
		Meditate.trancedHouse = false;
		Meditate.trancedTemple = false;
		Meditate.trancesTranced = 0;
		Meditate.gardenTrance = 0;
		Meditate.houseTrance = 0;
		Meditate.templeTrance = 0;
		Meditate.chantInputs.clear();
		NPC.scheduled = false;
		NPC.reaperMoved = false;
		NPC.kimiState = "";
		NPC.todState = "content";
		World.tripwire = false;
		World.dark = false;
		World.raDropped = false;
		World.islandOpen = false;
		World.omInSafe = true;
		World.jiInSafe = true;
		World.niInSafe = true;
		World.yuInCase = true;
		World.goInBox = true;
		World.sandExhibitDoorOpen = false;
		World.loungeSafeOpen = false;
		World.shrineRoom1SafeOpen = false;
		World.shrineRoom2DoorOpen = false;
		World.courtyardDoorOpen = false;
		World.studySafeOpen = false;
		World.creakyDeckOpen = false;
		World.caseOpen = false;
		World.cornOnRod = false;
		World.bite = false;
		World.theaterTVAtBeginning = true;
		World.reaperDisabled = false;
		
		World.resetBulbs();
		Room.wipeRooms();
	}
	
	private static void addMemory() {
		Player.memory.add("lotus");
		Player.memory.add("fish");
		Player.memory.add("knot");
		Player.memory.add("om");
		Player.memory.add("ni");
		Player.memory.add("go");
		Player.memory.add("yu");
		Player.memory.add("ji");
		Player.memory.add("ra");
		Player.memory.add("shi");
	}
	
	private static void addItems() {
		Player.inventory.add(Item.Om.getTitle());
		Player.inventory.add(Item.Ni.getTitle());
		Player.inventory.add(Item.Go.getTitle());
		Player.inventory.add(Item.Yu.getTitle());
		Player.inventory.add(Item.Ji.getTitle());
		Player.inventory.add(Item.Ra.getTitle());
		Player.inventory.add(Item.Shi.getTitle());
	}
	
	public static void cheat() {
		Story.print("What a mischievous thing to try!");
		// Player.updateLocation(Room.masterBedroom);
	}
}